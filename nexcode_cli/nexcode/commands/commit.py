import os
import click
import subprocess
from ..config import config as app_config
from ..utils.git import get_git_diff, ensure_git_root
from ..api.client import api_client



def run_git_command_with_ai(command, dry_run=False):
    """Git command wrapper that includes AI error assistance."""
    from ..utils.git import run_git_command
    
    def ai_helper(cmd, error_msg):
        return api_client.git_error_analysis(cmd, error_msg)
    
    return run_git_command(command, dry_run=dry_run, ai_helper_func=ai_helper)


def handle_commit_command(dry_run, preview, style, check_bugs, no_check_bugs):
    """Implementation of the commit command."""
    
    # Á°Æ‰øùÂú®GitÊ†πÁõÆÂΩïÊâßË°å
    git_root, original_cwd = ensure_git_root()
    if git_root is None:
        return
    
    try:
        click.echo("‚Ä∫ Checking for staged changes...")
        # run git add .
        run_git_command_with_ai(['git', 'add', '.'])
        diff = get_git_diff(staged=True)
        
        if not diff:
            click.echo("No staged changes found. Use 'git add <files>' to stage your changes first.")
            return

        # Determine if bug check should be run
        should_check_bugs = check_bugs or (
            app_config.get('commit', {}).get('check_bugs_by_default', False) and not no_check_bugs
        )

        # Run bug check if requested or configured by default
        if should_check_bugs:
            click.echo("‚Ä∫ Running comprehensive code quality analysis...")
            quality_result = api_client.code_quality_check(diff)
            
            click.secho("\nüîç Code Quality Analysis Results:", fg="blue", bold=True)
            click.echo("-" * 40)
            analysis = quality_result.get("summary", "No analysis available")
            click.echo(analysis)
            overall_score = quality_result.get("overall_score", 0.0)
            click.echo(f"\nOverall Quality Score: {overall_score}/10.0")
            click.echo("-" * 40)
            
            # Ask user if they want to continue based on score
            if overall_score < 6.0:
                if not click.confirm("\nCode quality issues detected. Do you want to continue with the commit?", default=False):
                    click.echo("Commit cancelled due to code quality issues.")
                    return
            else:
                click.echo("‚úÖ Code quality looks good!")

        # Show which style is being used
        used_style = style or app_config.get('commit', {}).get('style', 'conventional')
        click.echo(f"‚Ä∫ Generating commit message with AI ({used_style} style)...")
        
        # ‰ΩøÁî®ÊúçÂä°Á´ØAPIÁîüÊàêÊèê‰∫§Ê∂àÊÅØ
        commit_message = api_client.generate_commit_message(diff, used_style)

        if commit_message and not commit_message.startswith("Failed to connect") and not commit_message.startswith("Error"):
            click.echo(f"‚úì Generated commit message:\n  {commit_message}")
            
            if preview or dry_run:
                if dry_run:
                    click.echo("[DRY RUN] This is what would be committed.")
                return
            
            if click.confirm("Do you want to proceed with this commit?", default=True):
                result = run_git_command_with_ai(['git', 'commit', '-m', commit_message])
                if result:
                    click.echo("‚úì Successfully committed.")
            else:
                click.echo("Commit aborted by user.")
        else:
            click.echo(f"‚úó Failed to generate commit message: {commit_message}")
            click.echo("Please check your server connection and configuration.")
    
    finally:
        # ÂàáÊç¢ÂõûÂéüÂßãÁõÆÂΩï
        if original_cwd and original_cwd != git_root:
            os.chdir(original_cwd)


@click.command()
@click.option('--message', '-m', help='Áõ¥Êé•ÊåáÂÆöÊèê‰∫§Ê∂àÊÅØ')
@click.option('--style', default='conventional', 
              help='Êèê‰∫§Ê∂àÊÅØÈ£éÊ†º: conventional, simple, detailed')
@click.option('--auto', is_flag=True, help='Ëá™Âä®ÁîüÊàêÊ∂àÊÅØÂπ∂Êèê‰∫§')
def commit(message, style, auto):
    """Êô∫ËÉΩÁîüÊàêÊèê‰∫§Ê∂àÊÅØÂπ∂Êèê‰∫§‰ª£Á†Å"""
    
    try:
        # Ëé∑Âèñgit diff
        diff = get_git_diff()
        if not diff:
            click.echo("‚ùå Ê≤°ÊúâÂèëÁé∞‰ª£Á†ÅÂèòÊõ¥")
            return
        
        if message:
            # ‰ΩøÁî®Áî®Êà∑Êèê‰æõÁöÑÊ∂àÊÅØ
            final_message = message
        else:
            # ÁîüÊàêÊèê‰∫§Ê∂àÊÅØ
            click.echo("ü§ñ Ê≠£Âú®ÁîüÊàêÊô∫ËÉΩÊèê‰∫§Ê∂àÊÅØ...")
            
            result = api_client.generate_commit_message(
                diff=diff,
                style=style,
                context={}
            )
            
            if 'error' in result:
                click.echo(f"‚ùå ÁîüÊàêÊèê‰∫§Ê∂àÊÅØÂ§±Ë¥•: {result['error']}")
                return
            
            suggested_message = result.get('message', 'Auto-generated commit message')
            click.echo(f"üí° Âª∫ËÆÆÁöÑÊèê‰∫§Ê∂àÊÅØ: {suggested_message}")
            
            if auto:
                final_message = suggested_message
            else:
                if click.confirm("‰ΩøÁî®Ëøô‰∏™Êèê‰∫§Ê∂àÊÅØÂêó?"):
                    final_message = suggested_message
                else:
                    final_message = click.prompt("ËØ∑ËæìÂÖ•Ëá™ÂÆö‰πâÊèê‰∫§Ê∂àÊÅØ")
        
        # ÊâßË°åÊèê‰∫§
        try:
            # Ê∑ªÂä†ÊâÄÊúâÂèòÊõ¥Êñá‰ª∂
            subprocess.run(['git', 'add', '.'], check=True)
            
            # Êèê‰∫§
            subprocess.run(['git', 'commit', '-m', final_message], check=True)
            
            click.echo(f"‚úÖ ‰ª£Á†ÅÂ∑≤ÊàêÂäüÊèê‰∫§!")
            click.echo(f"üìù Êèê‰∫§Ê∂àÊÅØ: {final_message}")
            
        except subprocess.CalledProcessError as e:
            click.echo(f"‚ùå Êèê‰∫§Â§±Ë¥•: {e}")
            return
        
    except Exception as e:
        click.echo(f"‚ùå Êèê‰∫§ËøáÁ®ã‰∏≠Âá∫Áé∞ÈîôËØØ: {str(e)}")
        raise click.ClickException(str(e)) 